argo-workflows:
  enabled: true
  workflow:
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: true
      # -- Service account which is used to run workflows
      name: "argo-workflow"
    rbac:
      # -- Adds Role and RoleBinding for the above specified service account to be able to run workflows.
      # A Role and Rolebinding pair is also created for each namespace in controller.workflowNamespaces (see below)
      create: true

  # -- Restrict Argo to operate only in a single namespace (the namespace of the
  # Helm release) by apply Roles and RoleBindings instead of the Cluster
  # equivalents, and start workflow-controller with the --namespaced flag. Use it
  # in clusters with strict access policy.
  singleNamespace: false

  controller:

    # -- Specify all namespaces where this workflow controller instance will manage
    # workflows. This controls where the service account and RBAC resources will
    # be created. Only valid when singleNamespace is false.
    workflowNamespaces:
      - argo-workflows
      - app01-workflows
      - app02-workflows

    # in v3.0+, a second controller can be ran as a hot-standby: https://argoproj.github.io/argo-workflows/high-availability/#workflow-controller
    replicas: 2 # should be strictly greater than PDB minAvailable
    # enable PDB with at least one Pod
    pdb:
      # -- Configure [Pod Disruption Budget] for the controller pods
      enabled: true
      minAvailable: 1
    # Enable the creation of the ServiceMonitor
    serviceMonitor:
      enabled: true
    # Expose Metrics
    metricsConfig:
      enabled: true
    # Expose Telemetry
    telemetryConfig:
      enabled: true  

    # -- Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level.
    ## See more: https://argo-workflows.readthedocs.io/en/latest/default-workflow-specs/
    workflowDefaults:
      spec:
        serviceAccountName: argo-workflow
        

  server:
    # enable HPA with at least two Pods
    autoscaling:
      # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo Server
      enabled: true
      # -- Minimum number of replicas for the Argo Server [HPA]
      minReplicas: 2 # should be strictly greater than PDB minAvailable
    # enable PDB with at least one Pod
    pdb:
      # -- Configure [Pod Disruption Budget] for the controller pods
      enabled: true
      minAvailable: 1
    
    # -- Extra arguments to provide to the Argo server binary.
    ## Ref: https://argoproj.github.io/argo-workflows/argo-server/#options
    # extraArgs:
    #   - --auth-mode=sso

    # -- A list of supported authentication modes. Available values are `server`, `client`, or `sso`. If you provide sso, please configure `.Values.server.sso` as well.
    ## Ref: https://argoproj.github.io/argo-workflows/argo-server-auth-mode/
    authModes:
      # - server # This is to disable authentication
      - sso # To delegate auth on DEX server

    # SSO configuration when SSO is specified as a server auth mode.
    sso:
      enabled: true
      issuer: https://dex-argo-workflows.apps.ocp.sandbox2972.opentlc.com/api/dex
      # sessionExpiry defines how long your login is valid for in hours. (optional, default: 10h)
      sessionExpiry: 240h
      clientId:
        # -- Name of secret to retrieve the app OIDC client ID
        name: argo-workflows-sso
        # -- Key of secret to retrieve the app OIDC client ID
        key: client-id
      clientSecret:
        # -- Name of a secret to retrieve the app OIDC client secret
        name: argo-workflows-sso
        # -- Key of a secret to retrieve the app OIDC client secret
        key: client-secret
      # - The OIDC redirect URL. Should be in the form <argo-wf-root-url>/oauth2/callback.
      redirectUrl: https://argowf-argo-workflows.apps.ocp.sandbox2972.opentlc.com/oauth2/callback
      # -- Skip TLS verification for the HTTP client
      rbac:
        # -- Adds ServiceAccount Policy to server (Cluster)Role.
        enabled: true
      # -- Scopes requested from the SSO ID provider
      ## The 'groups' scope requests group membership information, which is usually used for authorization decisions.
      scopes:
        - groups
      insecureSkipVerify: true
